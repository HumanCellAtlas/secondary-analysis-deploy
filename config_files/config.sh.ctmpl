#!/usr/bin/env bash

# Source the environment specific variables

# Dynamic Variables

source "${CONFIG_DIR}/environment.${ENVIRONMENT}"

export ADAPTER_PIPELINES_VERSION="v1.3.1"

export LIRA_VERSION="v0.23.1"

export FALCON_VERSION="v0.4.3"

export SS2_VERSION="smartseq2_v2.5.0"

export TENX_VERSION="cellranger_v1.0.2"

export OPTIMUS_VERSION="optimus_v1.4.0"

# Cromwell Variables

export USE_CAAS=true
export MAX_CROMWELL_RETRIES=1
export CAAS_ENVIRONMENT="caas-prod"
export CROMWELL_URL="https://cromwell.${CAAS_ENVIRONMENT}.broadinstitute.org"
export MAX_CROMWELL_RETRIES=1
export CAAS_KEY_FILE="${CAAS_ENVIRONMENT}-key.json"


# Kuberenetes Variables

export KUBERNETES_CLUSTER="green-100-us-central1"
export KUBERNETES_NAMESPACE="green-100-us-central1-ns"
export KUBERNETES_ZONE="us-central1-a"


# Lira Variables

export LIRA_APPLICATION_NAME="lira"
export LIRA_DEPLOYMENT_NAME="lira"
export LIRA_CONTAINER_NAME="lira"
export LIRA_SERVICE_NAME="lira-service"
export LIRA_GLOBAL_IP_NAME="lira"
export LIRA_INGRESS_NAME="lira-ingress"
export LIRA_CONFIG_FILE="lira-config.json"
export LIRA_CONFIG_SECRET_NAME="lira-config-$(date '+%Y-%m-%d-%H-%M-%S')"
export LIRA_DEPLOYMENT_YAML="lira-deployment.yaml"
export LIRA_DOCKER_IMAGE="quay.io/humancellatlas/secondary-analysis-lira:${LIRA_VERSION}"
export GCS_ROOT="gs://${GCLOUD_PROJECT}-cromwell-execution/caas-cromwell-executions"

export USE_HMAC=true
export SUBMIT_WDL_DIR=""
export SUBMIT_AND_HOLD=true
export TEST_MODE=false

export CAAS_KEY_PATH="secret/dsde/mint/${ENVIRONMENT}/${LIRA_APPLICATION_NAME}/${CAAS_KEY_FILE}"

# Lira Autoscaling Variables
export LIRA_AUTOSCALER_NAME="lira-autoscaler"
export LIRA_MIN_REPLICAS="2"
export LIRA_MAX_REPLICAS="6"
export LIRA_PERCENT_TARGET_CPU_USAGE="75"


# Falcon Variables

export FALCON_NUMBER_OF_REPLICAS="1"
export FALCON_APPLICATION_NAME="falcon"
export FALCON_DEPLOYMENT_NAME="falcon"
export FALCON_CONTAINER_NAME="falcon"
export FALCON_CONFIG_FILE="falcon-config.json"
export FALCON_CONFIG_SECRET_NAME="falcon-config-$(date '+%Y-%m-%d-%H-%M-%S')"
export FALCON_DEPLOYMENT_YAML="falcon-deployment.yaml"
export FALCON_DOCKER_IMAGE="quay.io/humancellatlas/secondary-analysis-falcon:${FALCON_VERSION}"
export FALCON_QUEUE_UPDATE_INTERVAL="60"
export FALCON_WORKFLOW_START_INTERVAL="3"


# Adapter Pipelines

export ADAPTER_PIPELINES_PREFIX="https://raw.githubusercontent.com/HumanCellAtlas/adapter-pipelines/${ADAPTER_PIPELINES_VERSION}"

if [ -n "${SUBMIT_WDL_DIR}" ];
then
    export SUBMIT_WDL="${ADAPTER_PIPELINES_PREFIX}/shared/${SUBMIT_WDL_DIR}/submit.wdl"
else
    export SUBMIT_WDL="${ADAPTER_PIPELINES_PREFIX}/shared/submit/submit.wdl"
fi


# TLS Cert variables
export TLS_FULL_CHAIN_DIR="lira-ssl-certificate.crt"
export TLS_PRIVATE_KEY_DIR="lira-ssl-certificate.key"
export TLS_SECRET_NAME="hca-tls-secret"-$(date '+%Y-%m-%d-%H-%M-%S')


# Smart Seq 2 Variables

export SS2_PREFIX="https://raw.githubusercontent.com/HumanCellAtlas/skylab/${SS2_VERSION}"
export SS2_ANALYSIS_WDLS="[
                \"${SS2_PREFIX}/pipelines/smartseq2_single_sample/SmartSeq2SingleSample.wdl\",
                \"${SS2_PREFIX}/library/tasks/HISAT2.wdl\",
                \"${SS2_PREFIX}/library/tasks/Picard.wdl\",
                \"${SS2_PREFIX}/library/tasks/RSEM.wdl\",
                \"${SS2_PREFIX}/library/tasks/GroupMetricsOutputs.wdl\",
                \"${SS2_PREFIX}/library/tasks/ZarrUtils.wdl\"
            ]"
export SS2_OPTIONS_LINK="${ADAPTER_PIPELINES_PREFIX}/pipelines/ss2_single_sample/options.json"
export SS2_WDL_STATIC_INPUTS_LINK="${ADAPTER_PIPELINES_PREFIX}/pipelines/ss2_single_sample/static_inputs.json"
export SS2_WDL_LINK="${ADAPTER_PIPELINES_PREFIX}/pipelines/ss2_single_sample/adapter.wdl"
export SS2_WORKFLOW_NAME="AdapterSmartSeq2SingleCell"


# TenX Variables

export TENX_PREFIX="https://raw.githubusercontent.com/HumanCellAtlas/skylab/${TENX_VERSION}"
export TENX_ANALYSIS_WDLS="[
                \"${TENX_PREFIX}/pipelines/cellranger/cellranger.wdl\"
            ]"
export TENX_OPTIONS_LINK="${ADAPTER_PIPELINES_PREFIX}/pipelines/cellranger/options.json"
export TENX_WDL_STATIC_INPUTS_LINK="${ADAPTER_PIPELINES_PREFIX}/pipelines/cellranger/static_inputs.json"
export TENX_WDL_LINK="${ADAPTER_PIPELINES_PREFIX}/pipelines/cellranger/adapter.wdl"
export TENX_WORKFLOW_NAME="Adapter10xCount"


# TenX Variables

export OPTIMUS_PREFIX="https://raw.githubusercontent.com/HumanCellAtlas/skylab/${OPTIMUS_VERSION}"
export OPTIMUS_ANALYSIS_WDLS="[
                    \"${OPTIMUS_PREFIX}/pipelines/optimus/Optimus.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/FastqToUBam.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/Attach10xBarcodes.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/SplitBamByCellBarcode.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/MergeSortBam.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/CreateCountMatrix.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/StarAlignBamSingleEnd.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/TagGeneExon.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/CorrectUmiMarkDuplicates.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/SequenceDataWithMoleculeTagMetrics.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/TagSortBam.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/RunEmptyDrops.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/ZarrUtils.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/Picard.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/UmiCorrection.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/ScatterBam.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/ModifyGtf.wdl\",
                    \"${OPTIMUS_PREFIX}/library/tasks/OptimusInputChecks.wdl\"
                ]"

export OPTIMUS_OPTIONS_LINK="${ADAPTER_PIPELINES_PREFIX}/pipelines/optimus/options.json"
export OPTIMUS_WDL_STATIC_INPUTS_LINK="${ADAPTER_PIPELINES_PREFIX}/pipelines/optimus/static_inputs.json"
export OPTIMUS_WDL_LINK="${ADAPTER_PIPELINES_PREFIX}/pipelines/optimus/adapter.wdl"
export OPTIMUS_WORKFLOW_NAME="AdapterOptimus"
